<?php
namespace App\Traits;

/**
 * Trait TimeBounded
 * This trait, when used within an Eloquent model, allows bounded searches by start and end timestamps.
 * The model and underlying database implementation are expected to have the following:
 *   quantum_start timestamp
 *   quantum_end timestamp
 * @package Traits
 */
trait TimeBounded {

    // it's actually important to NOT declare $quantum_start and $quantum_end as local variables,
    // because that will hide the 'magic method' implementations generated by the Eloquent model.

    /**
     * $thing->activeAsOf($twoWeeksAgo)->get() will find only things that were active at that time.
     * @param Builder $query
     * @param Carbon $time
     * @return mixed
     */
    public function scopeActiveAsOf($query, Carbon $time)
    {
        return $query->where('quantum_start', '<=', $time)
                     ->where('quantum_end', '>=', $time);
    }

    /**
     * the arguably more useful $thing->active()->get() will find only things that are active now.
     * @param Builder $query
     * @return mixed
     */
    public function scopeActive($query)
    {
        $now = new Carbon();
        return $query->activeAsOf($now);
    }

    /**
     * order these elements by quantum start time ascending
     * e.g. $thing->byDate()->get;
     * @param Builder $query
     * @return mixed
     */
    public function scopeByDate($query)
    {
        return $query->orderBy('quantum_start','asc');
    }


    /**
     * Create a new model object with specified start/end dates.
     * @param Carbon $start
     * @param Carbon end
     * @param array $inputs
     * @return object
     */
     public static function CreateBounded($start,$end,$inputs)
     {
         $instance = new self($inputs);
         $instance->quantum_start = new Carbon($start);
         $instance->quantum_end = new Carbon($end);
         return $instance;
     }
}